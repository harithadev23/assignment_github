import numpy as np
import matplotlib.pyplot as plt

# Signal parameters
fs = 10000  # Sampling frequency in Hz
T = 1.0 / fs  # Sampling period (s)
L = 1000  # Number of samples
t = np.arange(0, L) * T  # Time vector

# Create a signal composed of fundamental and harmonic frequencies
fundamental_freq = 50  # 50 Hz fundamental
signal = (0.7 * np.sin(2 * np.pi * fundamental_freq * t) + 
          0.3 * np.sin(2 * np.pi * 150 * t) +  # 3rd harmonic (150 Hz)
          0.1 * np.sin(2 * np.pi * 250 * t))   # 5th harmonic (250 Hz)

# Perform FFT
fft_signal = np.fft.fft(signal)
fft_magnitude = 2.0 / L * np.abs(fft_signal[:L // 2])  # Normalize magnitude
frequencies = np.fft.fftfreq(L, T)[:L // 2]  # Frequency bins

# Plot the original signal in the time domain
plt.figure(figsize=(12, 6))
plt.subplot(2, 1, 1)
plt.plot(t, signal)
plt.title('Time Domain Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid(True)

# Plot the frequency domain (Fourier Transform)
plt.subplot(2, 1, 2)
plt.plot(frequencies, fft_magnitude)
plt.title('Frequency Domain (FFT)')
plt.xlabel('Frequency [Hz]')
plt.ylabel('Amplitude')
plt.grid(True)
plt.tight_layout()
plt.show()
